generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  firstname String?
  lastname  String?
  email     String  @unique
  username  String  @unique
  password  String

  posts        Post[]
  subs         Sub[]
  comments     Comment[]
  postVotes    PostVote[]
  commentVotes CommentVote[]

  @@index([email, username])
}

model Post {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  identifier String     @unique @default(cuid())
  title      String
  slug       String     @unique
  body       String?
  comments   Comment[]
  votes      PostVote[]

  author     User   @relation(fields: [authorName], references: [username], onDelete: Cascade, onUpdate: Cascade)
  authorName String

  sub     Sub    @relation(fields: [subName], references: [name], onDelete: Cascade, onUpdate: Cascade)
  subName String

  @@index([identifier, slug])
}

model Sub {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  name        String  @unique
  description String?
  imageUrn    String?
  bannerUrn   String?
  posts       Post[]

  creator     User   @relation(fields: [creatorName], references: [username], onDelete: Cascade, onUpdate: Cascade)
  creatorName String

  @@index([name])
}

model Comment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  body  String
  votes CommentVote[]

  author     User   @relation(fields: [authorName], references: [username], onDelete: Cascade, onUpdate: Cascade)
  authorName String
  post       Post   @relation(fields: [postSlug], references: [slug], onDelete: Cascade, onUpdate: Cascade)
  postSlug   String

  @@index([id])
}

model PostVote {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  value Int

  user     User   @relation(fields: [username], references: [username], onDelete: Cascade, onUpdate: Cascade)
  username String

  post   Post   @relation(fields: [postId], references: [identifier], onDelete: Cascade, onUpdate: Cascade)
  postId String

  @@index([id, postId])
}

model CommentVote {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  value Int

  user     User   @relation(fields: [username], references: [username], onDelete: Cascade, onUpdate: Cascade)
  username String

  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  commentId String

  @@index([id, commentId])
}
